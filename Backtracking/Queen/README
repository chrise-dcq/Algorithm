这个工程的目的是用来演示八皇后的解决方案
1. 八皇后问题描述：一个棋盘上有8行8列，在这个棋盘上放8个皇后，且这8个皇后之间相互不能攻击，即没两个皇后不能在同一行、同一列和同一个对角线上；这个问题最初有西洋的一个棋手提出，后来19世纪的数学家高斯对它进行了分析，它的结论是有76种方案，最终的结果是有92种方案。
2. 这个工程使用了两个Ｃ＋＋类来进行操作，以期代码复用。写这个代码的目的是为了熟悉回溯算法的使用。回溯算法的思想是深度遍历状态空间树和递归的结合。每个状态节点的处理方式相同，因此采用了递归的程序程序设计方法。ＤＦＳ则是递归的必然结果。回溯法比较适合求解有解问题或者所有解问题的方案，因为深度遍历更加容易接近解决方案，所有解问题反正都要整个状态空间树，所以采取这种递归的方式是比较方便的。
3. SimpleSolution是用来求解一个解，MultiSolution是用来求解所有解的。
4. SimpleSolution中result保存得到的每层节点的位置，collision用来保存列冲突的信息，crossCollision1用来存放反对角线的冲突信息，crossCollision2用来存放对角线的冲突信息。这里在处理两个对角线时有一定技巧，对角线上用QUEEN_NUM - 1 +j - i可以唯一确定一个对角线，反对角线用i+j可以唯一确定一个对角线。
